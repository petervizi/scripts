#!/bin/bash

## function definition ##

GPL="This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>."

##
# Convert an integer into hexadecimal form
#
# @param $1 an integer
# @return $1 in hexadecimal
#
inttohex() {
    echo $(echo "obase=16; $1" | bc)
}

##
# Format the license for the given language
#
# @param $1 the text
# @param $2 the language: c, makefile
#
formatlicense() {
    case $2 in
        c)
            echo '/**'
            comm=' *'
            end=' */'
            ;;
        makefile)
            echo '##'
            comm='#'
            end='#'
            ;;
    esac
    SIFS=$IFS
    IFS="
"
    for l in $(echo "$1")
    do
        echo "$comm $l"
    done
    echo "$end"
    IFS=$SIFS
}

##
# Return the Makefile for the application
#
# @param $1 the name of the application
# @param $2 the author
# @param $3 the license
# @return the content of the Makefile
#
makefile() {
    if [ "$2" != '' ]
    then
        comment="
##
# @author $2
#
"
    fi
    if [ "$3" != '' ]
    then
        lic=`formatlicense "$3" makefile`
        lic="$lic
"
    fi
    cat <<EOF
$lic$comment
COMPONENT = $1AppC

include \$(MAKERULES)
EOF
}

##
# Return the applications configuration file.
#
# @param $1 the name of the application
# @param $2 the used message AM id
# @param $3 author
# @param $4 license text
# @return the content of the configuration file
#
appfile() {
    inc="#include \"${1}.h\""
    if [ $2 -gt 0 ]
    then
        inc="$inc
#include \"${1}Msg.h\""
    fi
    aut=''
    if [ "$3" != '' ]
    then
        aut="
 * @author $3"
    fi
    if [ "$4" != '' ]
    then
        lic=`formatlicense "$4" c`
        lic="$lic

"
    fi
    cat <<EOF
$lic$inc

/**
 * $aut
 */
configuration $1AppC {
} implementation {
    components MainC;
    components $1C as App;

    App.Boot -> MainC;
}
EOF
}

##
# Create the content of the module file
#
# @param $1 the name of the application
# @param $2 the author
# @param $3 the license text
# @return the content of the module
#
modulefile() {
    if [ "$2" != '' ]
    then
        aut=" 
 * @author $2"
    fi
    if [ "$3" != '' ]
    then
        lic=`formatlicense "$3" c`
        lic="$lic

"
    fi
    cat <<EOF
$lic/**
 *$aut
 */
module $1C {
    uses interface Boot;
} implementation {

    /* variables */

    /* end variables */

    /* functions */

    /* end functions */

    /* tasks */

    /* end tasks */

    /* events */

    event void
    Boot.booted() {
    }

    /* end events */ 
}
EOF
}

##
# Create the README.rst content.
#
# @param $1 the name of the application
# @param $2 author
# @return the content of the README
#
readmefile() {
    for (( i = 0 ; i < ${#1}; i++ ))
    do
        echo -n "="
    done
    echo -e "\n$1"
    for (( i = 0 ; i < ${#1}; i++ ))
    do
        echo -n "="
    done
    echo
    if [ "$2" != '' ]
    then
        echo -e "\n:authors: $2\n"
    fi
}

##
# Create a header file for the application.
#
# @param $1 the name of the application
# @param $2 author
# @param $3 license text
# @return the content of the header file
#
headerfile() {
    NAME=`echo $1 | tr '[:lower:]' '[:upper:]'`
    if [ "$2" != '' ]
    then
        aut="
/**
 *
 * @author $2
 */
"
    fi
    if [ "$3" != '' ]
    then
        lic=`formatlicense "$3" c`
        lic="
$lic
"
    fi
        cat <<EOF
#ifndef _${NAME}_H_
#define _${NAME}_H_
$lic$aut
#endif /* _${NAME}_H_ */
EOF
}

##
# Print a short usage information
#
# @return the information
#
usage() {
        echo "Usage: tinyos-init [-a AUTHOR] [-g] [-h] [-o] AppName"
}

##
# Print help
#
# @return user help
#
help() {
    usage
    cat <<EOF

Create an empty TinyOS application with the given AppName.

 -a AUTHOR the name of the author to include in the files
 -g        include GPL license
 -h        print this help
 -o        overwrite existing files
EOF
}

## end of function definition ##

overwrite=''
author=''
license=''
while getopts oha:g o
do
    case "$o" in
        o) overwrite='true';;
        h) help
            exit 0;;
        a) author="$OPTARG";;
        g) license="$GPL";;
        [?]) usage
            exit 1;;
    esac
done

shift $(( OPTIND-1 ))

if [ "$1" == "" ]
then
    usage
    exit 1
fi

MAKEFILE="Makefile"
README="README.rst"
CONFIGFILE="$1AppC.nc"
MODULEFILE="$1C.nc"
HEADERFILE="$1.h"
MESSAGEFILE="$1Msg.h"

length=0
for i in ${#MAKEFILE} ${#README} ${#CONFIGFILE} ${#MODULEFILE} ${#HEADERFILE} ${#MESSAGEFILE}
do
    if [ $i -gt $length ]
    then
        length=$i
    fi
done

EXISTS_MSG="%${length}s exists\n"
CREATED_MSG="%${length}s created\n"

if [ -e $MAKEFILE -a "$overwrite" == "" ]
then
    printf "$EXISTS_MSG" $MAKEFILE
else
    makefile $1 "$author" "$license" > $MAKEFILE
    printf "$CREATED_MSG" $MAKEFILE
fi

if [ -e $CONFIGFILE -a "$overwrite" == "" ]
then
    printf "$EXISTS_MSG" $CONFIGFILE
else
    appfile $1 $message "$author" "$license" > $CONFIGFILE
    printf "$CREATED_MSG" $CONFIGFILE
fi

if [ -e $MODULEFILE -a "$overwrite" == "" ]
then
    printf "$EXISTS_MSG" $MODULEFILE
else
    modulefile $1 "$author" "$license" > $MODULEFILE
    printf "$CREATED_MSG" $MODULEFILE
fi

if [ -e $README -a "$overwrite" == "" ]
then
    printf "$EXISTS_MSG" $README
else
    readmefile $1 "$author" > $README
    printf "$CREATED_MSG" $README
fi

if [ -e $HEADERFILE -a "$overwrite" == "" ]
then
    printf "$EXISTS_MSG" $HEADERFILE
else
    headerfile $1 "$author" "$license" > $HEADERFILE
    printf "$CREATED_MSG" $HEADERFILE
fi
