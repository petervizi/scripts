#!/usr/bin/env python

##
# @file mpd2skype
#
# Print information about currently playing file into Skype's
# MoodText.
#

import mpd
import Skype4Py
from daemon import Daemon
from optparse import OptionParser
import time
import logging
import logging.handlers

class Mpd2Skype(Daemon):
    def __init__(self, pidfile):
        Daemon.__init__(self, pidfile, stdout='/tmp/mpd2skype.out', stderr='/tmp/mpd2skype.out')
        self.logger = logging.getLogger('mpd2skype')
        self.logger.setLevel(logging.DEBUG)
        fh = logging.handlers.TimedRotatingFileHandler('/tmp/mpd2skype.log', 'd', 1, 7)
        fh.setLevel(logging.DEBUG)
        formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
        fh.setFormatter(formatter)
        self.logger.addHandler(fh)

    def start(self):
        self.logger.info('Started.')
        Daemon.start(self)

    def stop(self):
        Daemon.stop(self)
        skype = Skype4Py.Skype()
        skype.Attach()
        skype.CurrentUserProfile.MoodText = ''
        self.logger.info('Stopped.')

    def run(self):
        skype = Skype4Py.Skype()
        skype.Attach()
        mpdc = mpd.MPDClient()
        try:
            mpdc.connect('localhost', 6600)
        except Exception:
            self.logger.info('No server running now.')
        text = ''
        status = {}
        while True:
            try:
                status = mpdc.status()
            except mpd.ConnectionError:
                try:
                    mpdc.connect('localhost', 6600)
                    status = mpdc.status()
                except Exception:
                    self.logger.info('No server running now.')
                    time.sleep(5)
                    continue
            if status['state'] == 'play':
                song = mpdc.currentsong()
                tmp = ''
                try:
                    tmp += song['title']
                except KeyError:
                    pass
                try:
                    tmp  += ' by ' + song['artist']
                except KeyError:
                    pass
                try:
                    tmp += " on " + song['album']
                except KeyError:
                    pass
                try:
                    tmp += " on " + song['name']
                except KeyError:
                    pass
                if text != tmp:
                    text = tmp
                    try:
                        skype.CurrentUserProfile.RichMoodText = tmp
                    except Exception, e:
                        self.logger.exception(e)
                    self.logger.info(tmp)
            else:
                text = ''
                skype.CurrentUserProfile.RichMoodText = text
            time.sleep(5)

if __name__ == "__main__":
    parser = OptionParser()
    (options, args) = parser.parse_args()
    if len(args) < 1:
        parser.error("Argument required!")

    daemon = Mpd2Skype('/tmp/mpd2skype.pid')
    if args[0] == 'start':
        daemon.start()
    elif args[0] == 'stop':
        daemon.stop()
    else:
        parser.error("Invalid argument!")
    parser.destroy()        

